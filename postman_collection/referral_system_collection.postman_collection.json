{
	"info": {
		"_postman_id": "95da4fec-ec9b-40c3-88e4-9b9ddd95d31f",
		"name": "referral_system_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33967972"
	},
	"item": [
		{
			"name": "send_code_first_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const phone = Array.from({length: 16}, () => Math.floor(Math.random() * 10)).join('');\r",
							"pm.collectionVariables.set(\"phone1\", phone);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"{{phone1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{send_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{send_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth_first_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields: access and refresh\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access', 'refresh');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access and Refresh tokens must be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.access).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"    pm.expect(responseData.refresh).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response conforms to the expected JSON schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access', 'refresh');\r",
							"    pm.expect(responseData.access).to.be.a('string');\r",
							"    pm.expect(responseData.refresh).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.access) {\r",
							"    pm.collectionVariables.set(\"first_user_access_token\", jsonData.access);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"{{phone1}}\",\r\n    \"code\": \"{{verification_code}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{verify_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{verify_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "first_user_profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('phone', 'invite_code', 'invited_users', 'used_invite_code');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The invited_users should be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.invited_users).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.invite_code) {\r",
							"    pm.collectionVariables.set(\"first_user_invite_code\", jsonData.invite_code);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{first_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{profileURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{profileURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "send_code_second_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const phone = Array.from({length: 16}, () => Math.floor(Math.random() * 10)).join('');\r",
							"pm.collectionVariables.set(\"phone2\", phone);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"{{phone2}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{send_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{send_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth_second_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields: access and refresh\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access', 'refresh');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access and Refresh tokens must be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.access).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"    pm.expect(responseData.refresh).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response conforms to the expected JSON schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access', 'refresh');\r",
							"    pm.expect(responseData.access).to.be.a('string');\r",
							"    pm.expect(responseData.refresh).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.access) {\r",
							"    pm.collectionVariables.set(\"second_user_access_token\", jsonData.access);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"{{phone2}}\",\r\n    \"code\": \"{{verification_code}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{verify_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{verify_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "second_user_using_invite_code_of_first_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{second_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"invite_code\": \"{{first_user_invite_code}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{use_invite_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{use_invite_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "send_code_third_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const phone = Array.from({length: 16}, () => Math.floor(Math.random() * 10)).join('');\r",
							"pm.collectionVariables.set(\"phone3\", phone);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"{{phone3}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{send_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{send_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth_third_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields: access and refresh\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access', 'refresh');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access and Refresh tokens must be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.access).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
							"    pm.expect(responseData.refresh).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response conforms to the expected JSON schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('access', 'refresh');\r",
							"    pm.expect(responseData.access).to.be.a('string');\r",
							"    pm.expect(responseData.refresh).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.access) {\r",
							"    pm.collectionVariables.set(\"third_user_access_token\", jsonData.access);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"{{phone3}}\",\r\n    \"code\": \"{{verification_code}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{verify_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{verify_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "third_user_using_invite_code_of_first_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{third_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"invite_code\": \"{{first_user_invite_code}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{use_invite_codeURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{use_invite_codeURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "first_user_profile_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('phone', 'invite_code', 'invited_users', 'used_invite_code');\r",
							"});\r",
							"\r",
							"pm.test(\"invited_users contains valid phone numbers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('invited_users').that.is.an('array');\r",
							"\r",
							"    responseData.invited_users.forEach(function(phone) {\r",
							"        pm.expect(phone).to.be.a('string');\r",
							"        pm.expect(phone).to.match(/^\\d+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The invited_users should be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.invited_users).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.access) {\r",
							"    pm.collectionVariables.set(\"first_user_invite_code\", jsonData.invite_code);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{first_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{profileURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{profileURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "second_user_profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('phone', 'invite_code', 'invited_users', 'used_invite_code');\r",
							"});\r",
							"\r",
							"pm.test(\"invited_users contains valid phone numbers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('invited_users').that.is.an('array');\r",
							"\r",
							"    responseData.invited_users.forEach(function(phone) {\r",
							"        pm.expect(phone).to.be.a('string');\r",
							"        pm.expect(phone).to.match(/^\\d+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The invited_users should be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.invited_users).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.access) {\r",
							"    pm.collectionVariables.set(\"first_user_invite_code\", jsonData.invite_code);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{second_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{profileURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{profileURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "third_user_profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('phone', 'invite_code', 'invited_users', 'used_invite_code');\r",
							"});\r",
							"\r",
							"pm.test(\"invited_users contains valid phone numbers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('invited_users').that.is.an('array');\r",
							"\r",
							"    responseData.invited_users.forEach(function(phone) {\r",
							"        pm.expect(phone).to.be.a('string');\r",
							"        pm.expect(phone).to.match(/^\\d+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The invited_users should be an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.invited_users).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Used invite code is equal to invite code of first user\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const expectedCode = pm.collectionVariables.get(\"first_user_invite_code\");\r",
							"    pm.expect(responseData.used_invite_code).to.equal(expectedCode);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"if (jsonData.access) {\r",
							"    pm.collectionVariables.set(\"first_user_invite_code\", jsonData.invite_code);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{third_user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{apiURL}}{{profileURL}}",
					"host": [
						"{{baseURL}}{{apiURL}}{{profileURL}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://127.0.0.1:8000/",
			"type": "default"
		},
		{
			"key": "verification_code",
			"value": "1234",
			"type": "string"
		},
		{
			"key": "apiURL",
			"value": "api/",
			"type": "string"
		},
		{
			"key": "send_codeURL",
			"value": "send_code/",
			"type": "string"
		},
		{
			"key": "verify_codeURL",
			"value": "verify_code/",
			"type": "string"
		},
		{
			"key": "profileURL",
			"value": "profile/",
			"type": "string"
		},
		{
			"key": "use_invite_codeURL",
			"value": "use_invite_code/",
			"type": "string"
		}
	]
}